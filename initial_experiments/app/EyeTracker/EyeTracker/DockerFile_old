# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app 
EXPOSE 8080
EXPOSE 8081


# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["EyeTracker.csproj", "."]
RUN dotnet restore "./EyeTracker.csproj"
RUN dotnet "./EyeTracker.csproj" add package OpenCvSharp4
RUN dotnet "./EyeTracker.csproj" add package OpenCvSharp4_.runtime.ubuntu.22.04-x64
COPY . .
WORKDIR "/src/."
RUN dotnet build "./EyeTracker.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./EyeTracker.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "EyeTracker.dll"]







######### FIRST OLD DOCKERFILE
# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
#FROM ubuntu:24.10 AS base
#RUN apt-get update && apt-get install -y dotnet-sdk-8.0
#RUN apt-get update && apt-get install -y aspnetcore-runtime-8.0
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app 
##install openCV with opencv_contrib - https://docs.opencv.org/4.x/d7/d9f/tutorial_linux_install.html
#RUN apt-get update && apt-get install -y cmake g++ wget unzip
#RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.x.zip
#RUN wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.x.zip
#RUN unzip opencv.zip
#RUN unzip opencv_contrib.zip
#RUN mkdir -p build && cd build
##RUN ls -l
##RUN ls -l opencv_contrib-4.x/modules
##RUN ls -l breakHerePlease
#RUN cmake -DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib-4.x/modules /app/opencv-4.x
#RUN cmake --build .
## install openCVSharp
#RUN git clone https://github.com/shimat/opencvsharp.git
#RUN cd opencvsharp
#RUN git fetch --all --tags --prune && git checkout ${OPENCVSHARP_VERSION}
## build openCVSharpExtern
#RUN cd src
#RUN mkdir build
#RUN cd build
#RUN cmake -D CMAKE_INSTALL_PREFIX=app/opencv-4.x ..
#RUN make -j 
#RUN make install
## add reference
#RUN export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:app/opencvsharp/src/build/OpenCvSharpExtern/libOpenCvSharpExtern"
#back to prebuilt dockerfile
EXPOSE 8080
EXPOSE 8081

# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["EyeTracker.csproj", "."]
RUN dotnet restore "./EyeTracker.csproj"
COPY . .
WORKDIR "/src/."
RUN dotnet build "./EyeTracker.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./EyeTracker.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "EyeTracker.dll"]